-- 행단위로 조회하는 셀렉션/내가 원하는 정보만 찾아서 보겠다라는 의미이다. 
SELECT*FROM emp
WHERE  sal = 5000;

--열단위로 조회하는 셀렉션
SELECT*FROM emp
WHERE job ='CLERK';

-- null은 0이라 같은 값이 아니다.
SELECT*FROM emp
WHERE comm = 0;

-- OR은 둘 중 하나만 있어도 나오는 것이다. NULL은 =을 쓰지 않는다. IS로 표현해야한다.
SELECT*FROM emp
WHERE comm = 0 OR comm IS NULL;

-- comm이 0이면서 NULL 인 경우는 없다. 
SELECT*FROM emp
WHERE comm = 0 AND comm IS NULL;

-- comm(보너스)가 없고 직업이 ANALYST인 직업을 셀렉션/ 데이터에 대소문자의 구분이 있다.
SELECT*FROM emp
WHERE comm IS NULL AND job = 'ANALYST';

--프로젝션: 원하는 데이터만 보겠다.
SELECT empno, ename, deptno
FROM emp
WHERE deptno = '30';

 -- 조인, 2개 이상의 데이터를 하나의 테이블처럼 조회하는 방법 / B 테이블을 기본키를 가져와서 쓰는 A 테이블이 있다. 이것을 A의 외래키라고 한다. 
 -- 이 두 값을 맞춰주어야한다. / 이 두 값은 같을 수 밖에 없다. / = 를 주로 사용해서 표현한다.
 -- 부서번호에 따른 부서명을 한번에 볼 수 있게 2개의 테이블을 합쳐서 볼 수 있다. / 이거는 실제하는 테이블이 아닌 가상의 테이블(버츄얼테이블) / 프로그램 상에만 존재한다.
 -- 테이블명이 너무 긴경우, 별칭을 사용할 수 있다.
 SELECT*FROM emp
 JOIN dept
 ON emp.deptno = dept.deptno;
 
SELECT*FROM emp e
 JOIN dept d
 ON e.deptno = d.deptno;
 
 SELECT e. empno, e. ename, e. job, d. deptno
 FROM emp e
 JOIN dept d
 ON e.deptno = d.deptno;
 
 -- DISTINCT 복습 / 컴퓨터를 쓰는 이유는 효율을 위해서 이다. / 수동으로 찾아서 하는 것은 거의 없다. / 모든 것을 프로그램으로 만들어서 하는 듯
 SELECT DISTINCT job FROM emp;
 
 -- 별칭 ALAS
 SELECT ename, job, sal, sal+sal+sal+sal+sal+sal+sal+sal+sal+sal+sal+sal
 FROM emp;
 
 --NULL의 문제 
SELECT ename, job, sal, sal*12+comm
 FROM emp;
 
-- 다양한 연산기호를 사용할 수 있다. / 데이터의 이름 바꾸기 AS 명령어.(기준이다. 빼고 적어도 되기는 한데 표준은 AS를 넣는 것이다,)
SELECT ename, job, sal, sal*12 AS annual
 FROM emp;
 
 -- 위의 명렁어와 같은 결과를 얻을 수 있다.
 -- ASC(오름차순): 오름차순으로 순서를 나타내 주는 명령어.
SELECT ename, job, sal, sal*12 annual
 FROM emp
 ORDER BY sal ASC;
 
 -- DESC(내림차순): 내림차순으로 순서를 나타내 주는 명령어.
 -- 숫자 데이터가 여러개일 경우에는 위의 두 명령어를 다양하게 사용 가능하다.
SELECT ename, job, sal, sal*12 annual
 FROM emp
 ORDER BY sal DESC;

-- 다양한 연산자 활용하기
-- WHERE 절
-- 한줄에서도 별칭을 뒤에서 사용할 수 없다. / 에러 발생
SELECT ename, job, sal, sal*12 annual
 FROM emp
WHERE annual>= 10000;

SELECT ename, job, sal, sal*12 annual
 FROM emp
WHERE sal*12>= 10000;

SELECT ename, job, sal, sal*12 annual
 FROM emp
WHERE sal = 1000;

SELECT ename, job, sal, sal*12 annual
 FROM emp
WHERE sal <> 1000; -- !=, <> 가 많이 사용된다. ^=는 거의 사용되지 않는다.

-- NOT 절.  내용전체를 부정하는 연산자임으로 이므로 내용의 앞에 둬야한다. 
SELECT ename, job, sal, sal*12 annual
 FROM emp
WHERE NOT sal = 1000;

--IN 절. 빈도가 20정도 이다. 통계낼때 사용. 그러나 전체적인 데이터를 다루는 곳에서는 주로 사용되지 않는다.
-- 숫자 사이나 띄어적을 때는 , (콤나) 사용 주의
SELECT ename, job, sal, sal*12 annual
 FROM emp
WHERE sal IN (800, 1600, 5000); 

-- OR절도 가능 그러나 효율적이게 사용하기 위해서 IN절을 사용하는 것이 좋다. 
-- 절이 길어지면 결과가 도출되는 시간이 늘어남으로 효율성이 떨어진다. 
SELECT ename, job, sal, sal*12 annual
 FROM emp
WHERE sal = 800 OR sal = 1600 OR sal = 5000; 

-- BETWEEN A AND B
-- 커리를 줄이기 위해서 사용한다.
SELECT ename, job, sal, sal*12 annual
 FROM emp
 WHERE sal >= 1600 AND sal <=2975;
 
 SELECT ename, job, sal, sal*12 annual
 FROM emp
  WHERE sal BETWEEN 1600 AND 2975; 
  
 -- LIKE 문
 -- ~와 같은. 조건을 검색할 때 사용한다.
 -- %가 글자나 숫자가 포함된 것을 검색할 때 주로 사용하는 것이다.
 -- %를 어딕에 붙이느랴에 따라서 검색되는 결과가 다르게 나온다.
 -- O%, %O, %O%, __RD
 SELECT ename, job, sal, sal*12 annual
 FROM emp 
WHERE ename = 'JONES';

 SELECT ename, job, sal, sal*12 annual
 FROM emp 
WHERE ename LIKE 'J%';

-- 특정한 글자 수를 지정할 수 있는 것. 
-- __RD: 4글자이면서 RD로 끝나는 데이터를 검색할 때 사용할 수 있다. 
 SELECT ename, job, sal, sal*12 annual
 FROM emp 
 WHERE ename LIKE '__RD'; 
 
 SELECT ROUND(15 193.1) FROM dual; --?
 
 -- SYSDATE: 현재 날짜와 시간을 출력해준다.
 -- 외국식으로 출력이 나타난다.
 SELECT SYSDATE FROM dual;

-- 자료형을 변형시키는 우가 왕왕 많다.
-- 자료형을 반환하는 '형 변환 함수'
 --TO_CHAR(sal): sal이 내부적으로 문자로 바뀐 것
 -- dual: 가상테이블. 없는 테이블에서 숫자를 가져오는데 쓰이는 공통? 기본적인 테이블.
SELECT ename, hiredate, TO_CHAR(sal) FROM emp;
SELECT ename, hiredate, sal+1000 FROM emp;
SELECT ename, hiredate, TO_CHAR(sal) + 1000 FROM emp;
SELECT ename, hiredate, TO_CHAR(sal) + '1000' FROM emp;
SELECT ename, hiredate, TO_CHAR(hiredate, 'yyyy-mm-dd'), TO_CHAR(sal) FROM emp;-- 언니 짱!

SELECT ename, TO_CHAR(hiredate, 'yyyy-mm-dd') FROM emp;

-- TO_NUMBER
SELECT TO_NUMBER('2400') + 100 FROM dual;

-- 글자를 숫자로 바꿀 수 없다. 숫자인 글자를 숫자로 바꿀 수 있다.
SELECT TO_NUMBER('이천사백') + 100 FROM dual;

-- TO_DATE
SELECT TO_DATE('2022-01-12') FROM dual;

SELECT TO_DATE('01/11/22') FROM dual;

SELECT TO_DATE('01/11/22', 'mm/dd/yy') FROM dual; -- 국가마다 날짜를 나타내는 순서가 다를 수 있다. 이것을 원하는 나라에 맞춰서 조절할 수 있는 방법이다.

-- NVL: NULL을 취급하는 방법 중 하나. 
-- 숫자로 들어간 NULL은 다른 숫자와 연산이 불가능하여 NULL을 숫자로 바꿔주는 함수가 NVL 이다.
SELECT ename, job, sal, sal*12 annual, NVL(comm, 0) comm
 FROM emp
 ORDER BY sal ASC;

SELECT ename, job, sal, (sal*12) + NVL(comm, 0) AS annual
 FROM emp
 ORDER BY sal ASC;
 
 SELECT ename, job, sal,  NVL(comm, 0) comm, (sal*12) + NVL(comm, 0) AS annual
 FROM emp
 ORDER BY sal ASC;
 
-- 집계함수: SUM, COUNT, MIN, MAX, AVG
SELECT sal, NVL(comm, 0)  FROM emp;

SELECT SUM(sal) Totalsalary  FROM emp;

SELECT SUM(NVL(comm,0)) Totalcommssion  FROM emp;
SELECT SUM(comm) Totalcommssion  FROM emp;

SELECT MAX(sal) from  emp;

SELECT MIN(sal) from  emp;

SELECT AVG(sal) FROM emp;
SELECT ROUND(AVG(sal),0) sal_avg FROM emp; -- ROUND 를 이용하여 소수점 아래 자리 숫자를 조절할 수 있다.
SELECT ROUND(AVG(sal),1) sal_avg FROM emp; -- ROUND(숫자데이터, 소수점자리수)


SELECT MAX(sal), ename from  emp; -- 이런 경우를 위해 GROUP BY 함수를 사용한다.

-- GROUP BY 
SELECT MAX(sal), ename 
from  emp
GROUP BY ename; -- MAX가 안 나오고 다 나온다. ename(이름)은 다 다르기 때문에 그룹화 중 MAX가 나타나지 않고 모드 그 그룹에서 최대임으로 다 나온다.

SELECT MAX(sal), job 
from  emp
GROUP BY job; -- job에서 가장 MAX인 값들만 집계된다.

SELECT MAX(sal)월급최대 , SUM(sal) 직업군당급여합계, job 
from  emp
GROUP BY job;

-- 집계함수를 제외하고 셀렉션할 테이블 수와 그룹바이 테이블 수와 같아야 한다.
-- 집계함수는 함수를 사용해서 결과값을 도출해낸 것이다.
-- 어렵다 더 생각해보자.
-- GROUP BY는 그룹화할 열을 지정.(여러개 지정 가능)
SELECT MAX(sal)월급최대 , SUM(sal) 직업군당급여합계, job, deptno 
from  emp
GROUP BY job, deptno ;

SELECT MAX(sal)월급최대 , SUM(sal) 직업군당급여합계
from  emp;

SELECT MAX(sal)월급최대 , SUM(sal) 직업군당급여합계, job 
from  emp
GROUP BY job ;

-- HAVING
-- 그룹화된 값들을 한번 걸러주는 기능.

SELECT MAX(sal)월급최대 , SUM(sal) 직업군당급여합계, job -- 별칭은 하나의 실행 라인에서만 사용이 가능
from  emp
GROUP BY job 
HAVING MAX(sal) > 4000;

SELECT MAX(sal)월급최대 , SUM(sal) 직업군당급여합계, job 
from  emp
WHERE MAX(sal) > 4000 -- 집계함수(그룹화)한 함수는 WHERE절에 쓸 수 없다. 이때는 HAVING 을 사용해야한다. 위의 함수.
GROUP BY job ;

-- 기본 함수
SELECT deptno, job, sal
FROM emp
ORDER BY deptno, job; -- 오름차순이 기본이기때문에 작성하기 않아도 된다. 

-- 평균 급여가 3000달러 이상인 직종만 나타내자.
SELECT deptno, job,  AVG(sal)
FROM emp
GROUP BY deptno, job
HAVING AVG(sal) >= 3000
ORDER BY deptno, job;-- 모조건 마지막 순서이다. 

-- 원하는 집계 내용을 추가하면 원하는 결과값을 테이블로 나타낼 수 있다.
SELECT deptno, job,  AVG(sal), MAX(sal), COUNT(*) 
FROM emp
GROUP BY deptno, job
HAVING AVG(sal) >= 1000
ORDER BY deptno, job;

-- ROLLUP: GROUP BY 뒤에서 사용한다.
-- GROUP BY ROLLUP()
-- 그룹화된 데이터의 합계
-- 여기서 나오는 NULL은 우리가 처리해 줘야한다.
SELECT NVL(deptno, 00)deptno, NVL(job, '합계')job,  ROUND(AVG(sal), 0) 급여평균, MAX(sal) 급여최대, SUM(sal) 급여합계, COUNT(*) 그룹별직원수 
FROM emp
GROUP BY ROLLUP (deptno, job);
-- HAVING AVG(sal) >= 1000
-- ORDER BY deptno, job;

SELECT deptno, NVL(job, '합계')job,  ROUND(AVG(sal), 0) 급여평균, MAX(sal) 급여최대, SUM(sal) 급여합계, COUNT(*) 그룹별직원수 
FROM emp
GROUP BY ROLLUP (deptno, job);










